{"version":3,"file":"static/js/183.da656b4e.chunk.js","mappings":"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","sources":["views/pharmacies/pharmaciesList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n  CInputGroup,\n  CFormInput,\n} from '@coreui/react'\nimport axios from 'axios'\nconst UsersList = () => {\n  const [pharmacies, setPharmacies] = useState([])\n  const [filteredPharmacies, setFilteredPharmacies] = useState([])\n  const [filters, setFilters] = useState({\n    name: '',\n    owner: '',\n    phone: '',\n  })\n  useEffect(() => {\n    // Function to fetch users\n    const fetchPharmacies = async () => {\n      try {\n        const response = await axios.get('http://localhost:3117/pharmacies')\n        setPharmacies(response.data)\n        setFilteredPharmacies(response.data)\n        console.log(response.data)\n      } catch (error) {\n        console.error('Error fetching users:', error)\n        // Handle error states if needed\n      }\n    }\n\n    // Call the function to fetch users\n    fetchPharmacies()\n  }, []) // Run this effect only once (on component mount)\n  // Update filters for Full Name input change\n  const handleNameChange = (e) => {\n    setFilters({ ...filters, name: e.target.value })\n  }\n\n  // Update filters for Email input change\n  const handleOwnerChange = (e) => {\n    setFilters({ ...filters, owner: e.target.value })\n  }\n  const handlePhoneChange = (e) => {\n    setFilters({ ...filters, phone: e.target.value })\n  }\n\n  useEffect(() => {\n    filterAndSearch()\n  }, [filters])\n\n  const filterAndSearch = () => {\n    let filteredData = [...pharmacies]\n\n    // Apply filters for name, owner, and phone number\n    filteredData = filteredData.filter(\n      (pharmacy) =>\n        pharmacy.name.toLowerCase().includes(filters.name.toLowerCase()) &&\n        pharmacy.owner.toLowerCase().includes(filters.owner.toLowerCase()) &&\n        pharmacy.phone?.includes(filters.phone),\n    )\n\n    setFilteredPharmacies(filteredData)\n  }\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>Pharma-Domi Pharmacies</strong>\n          </CCardHeader>\n          <CCardBody>\n            <div className=\"table-responsive\">\n              <CTable hover>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\"></CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">\n                      <CInputGroup className=\"mb-3\">\n                        <CFormInput\n                          placeholder=\"search by Pharmacy name\"\n                          aria-label=\"Username\"\n                          aria-describedby=\"basic-addon1\"\n                          onChange={handleNameChange}\n                        />\n                      </CInputGroup>\n                    </CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">\n                      <CInputGroup className=\"mb-3\">\n                        <CFormInput\n                          placeholder=\"search by owner name\"\n                          aria-label=\"Username\"\n                          aria-describedby=\"basic-addon1\"\n                          onChange={handleOwnerChange}\n                        />\n                      </CInputGroup>\n                    </CTableHeaderCell>\n\n                    <CTableHeaderCell scope=\"col\">\n                      <CInputGroup className=\"mb-3\">\n                        <CFormInput\n                          placeholder=\"search by phone number\"\n                          aria-label=\"Username\"\n                          aria-describedby=\"basic-addon1\"\n                          onChange={handlePhoneChange}\n                        />\n                      </CInputGroup>\n                    </CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\"></CTableHeaderCell>\n\n                    <CTableHeaderCell scope=\"col\"></CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableHead>\n                  <CTableRow>\n                    <CTableHeaderCell scope=\"col\">#</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\"> Name</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Owner</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">phone number</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Location</CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Actions</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody>\n                  {filteredPharmacies?.map((pharmacy, index) => (\n                    <CTableRow key={index}>\n                      <CTableHeaderCell scope=\"row\">{index + 1}</CTableHeaderCell>\n                      <CTableDataCell>{pharmacy.name}</CTableDataCell>\n                      <CTableDataCell>{pharmacy.owner}</CTableDataCell>\n\n                      <CTableDataCell>{pharmacy.phone}</CTableDataCell>\n                      <CTableDataCell>\n                        {pharmacy.latitude}, {pharmacy.longitude}\n                      </CTableDataCell>\n                      <CTableDataCell>Actions...</CTableDataCell>\n                    </CTableRow>\n                  ))}\n                </CTableBody>\n              </CTable>\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\nexport default UsersList\n"],"names":["UsersList","pharmacies","setPharmacies","useState","filteredPharmacies","setFilteredPharmacies","filters","setFilters","name","owner","phone","useEffect","async","response","axios","get","data","console","log","error","fetchPharmacies","filterAndSearch","filteredData","filter","pharmacy","_pharmacy$phone","toLowerCase","includes","_jsx","CRow","children","CCol","xs","_jsxs","CCard","className","CCardHeader","CCardBody","CTable","hover","CTableHead","CTableRow","CTableHeaderCell","scope","CInputGroup","CFormInput","placeholder","onChange","e","target","value","CTableBody","map","index","CTableDataCell","latitude","longitude"],"sourceRoot":""}